(* my c compiler parser ebnf list *)
(* opt = [] repeat = {} *)
(* HEAD *)
translation-unit
        = { external-declaration };

external-declaration
        = function-definition
        | declaration;

function-definition = declaration-specifiers, declarator, compound-statement;

(* STATEMENTS *)
statement
        = labeled-statement
        | compound-statement
        | expression-statement
        | iteration-statement
        | jump-statement;

labeled-statement
        = identifier, ":", statement
        | "case", constant-expression, ":", statement
        | "default", ":", statement;

compound-statement
        = "{", { block-item }, "}";

block-item
        = declaration
        | statement;

expression-statement
        = [ expression ], ";";

selection-statement
        = "if", "(", expression, ")", statement
        | "if", "(", expression, ")", statement, "else", statement
        | "switch", "(", expression, ")", statement;

iteration-statement
        = "while", "(", expression, ")", statement
        | "do", statement, "while", "(", expression, ")", ";"
        | "for", "(", [ expression ], ";", [ expression ], ";", [ expression ], ")", statement
        | "for", "(", declaration, [ expression ], ";", [ expression ], ")", statement;

jump-statement
        = "goto", identifier, ";"
        | "continue", ";"
        | "break", ";"
        | "return", [ expression ], ";";

(* DECLARATIONS *)
declaration
        = declaration-specifiers, init-declarator, ";";

declaration-specifiers
        = { storage-class-specifier | type-specifier };

init-declarator
        = declarator
        | declarator, "=", initializer;

storage-class-specifier
        = "typedef"
        | "auto";

type-specifier
        = "void"
        | "char"
        | "short"
        | "int"
        | "long"
        | "signed"
        | "unsigned"
        | "bool"
        | "_Bool"
        | struct-or-union-specifier
        | enum-specifier
        | typedef-name;

struct-or-union-specifier
        = struct-or-union, [ identifier ], "{", { struct-declaration }, "}"
        | struct-or-union, identifier;

struct-or-union
        = "struct"
        | "union";

struct-declaration
        = specifier-qualifier-list, struct-declarator, ";";

specifier-qualifier-list
        = { type-specifier | type-qualifier };

struct-declarator
        = declarator;

enum-specifier
        = "enum", [ identifier ], "{", enumerator, { ",", enumerator }, [ "," ], "}"
        | "enum", identifier;

enumerator
        = identifier, [ "=", constant-expression ];

type-qualifier
        = "const";

declarator
        = [ pointer ], direct-declarator;

direct-declarator
        = "(", declarator, ")"
        | identifier, [ "[", constant-expression, "]" ]
        | identifier, [ "[", assignment-expression, "]" ]
        | identifier, "(", [ parameter-type-list ], ")";

pointer
        = { "*" };

parameter-type-list
        = "void"
        | parameter-declaration, { ",", parameter-declaration }, [ ",", "..." ];

parameter-declaration
        = declaration-specifiers, declarator;

type-name
        = specifier-qualifier-list, abstract-declarator;

abstract-declarator
        = [ pointer ], [ direct-abstract-declarator ];

direct-abstract-declarator
        = "(", abstract-declarator, ")"
        | [ direct-abstract-declarator ], ( "[", ( { type-qualifier }, [ assignment-expression ]
        | "*" ), "]"
        | "(", [ parameter-type-list ], ")" );

typedef-name
        = identifier;

initializer
        = assignment-expression;

(* EXPRESSIONS *)
constant-expression
        = conditional-expression;

expression
        = assignment-expression;

assignment-expression
        = conditional-expression
        | conditional-expression, assignment-operator, assignment-expression;

assignment-operator
        = "="
        | "*="
        | "/="
        | "%="
        | "+="
        | "-="
        | "<<="
        | ">>="
        | "&="
        | "^="
        | "|=";

conditional-expression
        = logical-OR-expression, [ "?", expression, ":", expression ];

logical-OR-expression
        = logical-AND-expression, { "||", logical-AND-expression };

logical-AND-expression
        = inclusive-OR-expression, { "&&", inclusive-OR-expression };

inclusive-OR-expression
        = exclusive-OR-expression, { "|", exclusive-OR-expression };

exclusive-OR-expression
        = AND-expression, { "^", AND-expression };

AND-expression
        = equality-expression, { "&", equality-expression };

equality-expression
        = relational-expression, { ( "=="
        | "!=" ), relational-expression };

relational-expression
        = shift-expression, { ( "<"
        | ">"
        | "<="
        | ">=" ), shift-expression };

shift-expression
        = additive-expression, { ( "<<" | ">>" ), additive-expression };

additive-expression
        = multiplicative-expression, { ( "+"
        | "-" ), multiplicative-expression };

multiplicative-expression
        = cast-expression, { ( "*"
        | "/"
        | "%" ), cast-expression };

cast-expression
        = unary-expression;

unary-expression
        = postfix-expression
        | ( "++"
        | "--" ), unary-expression
        | unary-operator, cast-expression
        | "sizeof", unary-expression
        | "sizeof", "(", type-name, ")";

unary-operator
        = "&"
        | "*"
        | "+"
        | "-"
        | "~"
        | "!";

postfix-expression
        = primary-expression
        | postfix-expression, ( "[", expression, "]"
        | ".", identifier
        | "++"
        | "--"
        | "->", identifier );

primary-expression
        = identifier [ "(", { assignment-expression }, ")" ]
        | constant
        | string-literal
        | "(", expression, ")";